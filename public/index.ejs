<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@yaireo/tagify/dist/tagify.css">
    <style>
        body {
            background-color: #f8f9fa;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        .sidebar {
            height: 100vh;
            background-color: #ffffff;
            color: #333333;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        .main-content {
            height: 100vh;
            overflow-y: auto;
            padding: 20px;
        }
        .card {
            border-radius: 10px;
            border: none;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
        .nav-link {
            color: #333333;
            border-radius: 5px;
            margin-bottom: 5px;
        }
        .nav-link:hover, .nav-link.active {
            background-color: #e9ecef;
        }
        .btn-custom {
            background-color: #3b82f6;
            color: white;
            border-radius: 5px;
        }
        .btn-custom:hover {
            background-color: #2563eb;
            color: white;
        }
        .top-bar {
            background-color: #3b82f6;
            color: white;
            padding: 10px 0;
        }
        .profile-section {
            display: flex;
            align-items: center;
            justify-content: flex-end;
        }
        .profile-icon {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: #e9ecef;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-left: 10px;
        }
        .no-data-found {
            text-align: center;
            padding: 50px 0;
        }
        .no-data-found img {
            max-width: 200px;
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <div class="container-fluid">
        <div class="row">
            <!-- Top Bar -->
            <div class="col-12 top-bar">
                <div class="container">
                    <div class="row align-items-center">
                        <div class="col-6">
                            <h3 class="m-0">Content Management System</h3>
                        </div>
                        <div class="col-6 profile-section">
                            <div class="profile-icon">
                                <i class="bi bi-bell"></i>
                            </div>
                            <div class="profile-icon">
                                <i class="bi bi-chat"></i>
                            </div>
                            <div class="profile-icon">
                                <i class="bi bi-person"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Sidebar -->
            <%- include('../resources/views/pages/user/partials/sidenav.ejs') %>

            <!-- Main content -->
            <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4 main-content">
                <%- include('../resources/views/pages/user/components/overview.ejs') %>
            </main>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@yaireo/tagify"></script>
    <script>
        // Navigation handling
        document.addEventListener('DOMContentLoaded', function() {
            const navLinks = document.querySelectorAll('.sidebar .nav-link');
            const contentSections = document.querySelectorAll('.content-section');

            navLinks.forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault();

                    const targetSection = this.getAttribute('data-section');

                    // Update active states for nav links
                    navLinks.forEach(l => l.classList.remove('active'));
                    this.classList.add('active');

                    // Show the corresponding content section and hide others
                    contentSections.forEach(section => {
                        if (section.id === targetSection) {
                            section.classList.add('active');
                            section.style.display = "block";
                        } else {
                            section.classList.remove('active');
                            section.style.display = "none";
                        }
                    });
                });
            });
        });

        document.addEventListener('DOMContentLoaded', function() {
            let tagify;
            if (document.getElementById('overview')) {
                
                // Fetch current introduction from the server and populate the textarea
                async function fetchDetails() {
                    console.log('Fetching details');
                    const response = await fetch('/api/details');
                    const data = await response.json();
                    console.log(data);
                    
                    document.getElementById('introduction').value = data.introduction; 
                    document.getElementById('position').value = data.position;

                    let fieldsInput = document.getElementById('researchFields');
                    tagify = new Tagify(fieldsInput, {
                        delimiters: ",", // Tags are separated by commas
                        maxTags: 10,      // Optional limit
                        editTags: true    // Allow users to edit tags
                    });

                    tagify.addTags(data.fields);
                }

                // Fetch departments and populate dropdown
                async function fetchDepartments() {
                    const response = await fetch('/api/departments');
                    const departments = await response.json();
                    
                    const dropdown = document.getElementById('departmentDropdown');
                    departments.forEach(department => {
                        const option = document.createElement('option');
                        option.value = department.department_id;
                        option.textContent = department.department_name;
                        dropdown.appendChild(option);
                    });

                    // Set the selected department based on the logged-in user (session info)
                    const currentDepartmentId = '<%= user.department_id %>'; // Assuming you pass session info from the backend
                    dropdown.value = currentDepartmentId;
                }
                fetchDetails();
                fetchDepartments();
                
            }

            let profileData = {
                personal: {},
                professional: {}
            };
    
            async function updateProfileData() {
            
                // Gather personal information
                profileData.personal = {
                    firstName: document.getElementById('firstName').value,
                    middleName: document.getElementById('middleName').value,
                    lastName: document.getElementById('lastName').value,
                    honorifics: document.getElementById('honorifics').value,
                    introduction: document.getElementById('introduction').value
                };
            
                let selectedFields = tagify.value.map(tag => tag.value);
            
                // Gather professional information
                profileData.professional = {
                    position: document.getElementById('position').value,
                    researchFields: selectedFields, // Research fields from Tagify
                    department: document.getElementById('departmentDropdown').value // Selected department
                };
            
                try {
                    const response = await fetch('/update-profile', { // Ensure the correct API endpoint
                        method: 'PUT',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(profileData) // Convert profileData to a JSON string
                    });
            
                    if (response.ok) {
                        alert(`Profile updated successfully!`); // Display the updated introduction
                        window.location.href = '/home'; // Redirect to home or wherever you want
                    } else {
                        const errorData = await response.json();
                        alert(`Failed to update profile: ${errorData.message}`); // Show error message from the server
                    }
                } catch (error) {
                    console.error('Error updating profile:', error);
                    alert('An error occurred while updating the profile.');
                }
            }

        });
    </script>
</body>
</html>