<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@yaireo/tagify/dist/tagify.css">
    <style>
        body {
            background-color: #f8f9fa;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        .sidebar {
            height: 100vh;
            background-color: #ffffff;
            color: #333333;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        .main-content {
            height: 100vh;
            overflow-y: auto;
            padding: 20px;
        }
        .card {
            border-radius: 10px;
            border: none;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
        .nav-link {
            color: #333333;
            border-radius: 5px;
            margin-bottom: 5px;
        }
        .nav-link:hover, .nav-link.active {
            background-color: #e9ecef;
        }
        .btn-custom {
            background-color: #3b82f6;
            color: white;
            border-radius: 5px;
        }
        .btn-custom:hover {
            background-color: #2563eb;
            color: white;
        }
        .top-bar {
            background-color: #3b82f6;
            color: white;
            padding: 10px 0;
        }
        .profile-section {
            display: flex;
            align-items: center;
            justify-content: flex-end;
        }
        .profile-icon {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: #e9ecef;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-left: 10px;
        }
        .no-data-found {
            text-align: center;
            padding: 50px 0;
        }
        .no-data-found img {
            max-width: 200px;
            margin-bottom: 20px;
        }
        .card {
            position: relative;
        }
        .logo-container {
            position: absolute;
            top: 15px;
            left: 15px; /* Positioned at the bottom left */
            background-color: white; /* Add a white background for contrast */
            border-radius: 50%;
            padding: 5px; /* Adds space around the image for a clean look */
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Subtle shadow for depth */
            height: 100px; /* Fixed size for the logo */
            width: 100px; /* Same as height for a perfect circle */
            display: flex;
            align-items: center;
            justify-content: center;
        }
        .logo-circle {
            width: 100%;
            height: 100%;
            object-fit: cover;
            border-radius: 50%; /* Makes the image circular */
        }
        
    </style>
</head>
<body>
    <div class="container-fluid">
        <div class="row">
            <!-- Top Bar -->
            <div class="col-12 top-bar">
                <div class="container">
                    <div class="row align-items-center">
                        <div class="col-6">
                            <h3 class="m-0">Content Management System</h3>
                        </div>
                        <div class="col-6 profile-section">
                            <div class="profile-icon">
                                <i class="bi bi-bell"></i>
                            </div>
                            <div class="profile-icon">
                                <i class="bi bi-chat"></i>
                            </div>
                            <div class="profile-icon">
                                <i class="bi bi-person"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Sidebar -->
            <%- include('../resources/views/pages/user/partials/sidenav.ejs') %>

            <!-- Main content -->
            <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4 main-content">
                
                
                <!-- Content Section -->
                <%- include('../resources/views/pages/user/components/overview.ejs') %>
            </main>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@yaireo/tagify"></script>
    <script>
        // Navigation handling
        document.addEventListener('DOMContentLoaded', function() {
            const navLinks = document.querySelectorAll('.sidebar .nav-link');
            const mainContent = document.querySelector('.main-content');

            navLinks.forEach(link => {
                link.addEventListener('click', function(e) {
                    const targetSection = this.getAttribute('data-section');
                    
                    // Check if the link is the logout link
                    if (!targetSection) {
                        // Allow the default behavior (navigate to logout)
                        return; 
                    }

                    e.preventDefault();
        
        
                    // Update active states for nav links
                    navLinks.forEach(l => l.classList.remove('active'));
                    this.classList.add('active');
        
                    // Dynamically load the content for the clicked section
                    loadContent(targetSection);
                });
            });
        
            // Function to fetch the content from the server
            function loadContent(section) {
                fetch(`/home/${section}`) // Assumes you have a route for /load/:section
                    .then(response => response.text())
                    .then(html => {
                        mainContent.innerHTML = html; // Inject the HTML into the main content
                        if (section === 'overview'){
                            initializeOverview();
                        }else if (section === 'timeline'){
                            initializeTimeline();
                        }else if (section === 'achievements'){
                            initializeAchievements();
                        }else if (section === 'organizations'){
                            initializeOrganizations();
                        }else if (section === 'contacts'){
                            initializeContacts();
                        }
                    })
                    .catch(error => {
                        console.error('Error loading content:', error);
                    });
            }
            // overview page javascript functions
            function initializeOverview() {
                let tagify;
                
                // Fetch current introduction from the server and populate the textarea
                async function fetchDetails() {
                    console.log('Fetching details');
                    const response = await fetch('/api/details');
                    const data = await response.json();
                    console.log(data);
                    
                    document.getElementById('introduction').value = data.introduction; 
                    document.getElementById('position').value = data.position;

                    let fieldsInput = document.getElementById('researchFields');
                    tagify = new Tagify(fieldsInput, {
                        delimiters: ",", // Tags are separated by commas
                        maxTags: 10,      // Optional limit
                        editTags: true    // Allow users to edit tags
                    });

                    tagify.addTags(data.fields);
                }

                // Fetch departments and populate dropdown
                async function fetchDepartments() {
                    const response = await fetch('/api/departments');
                    const departments = await response.json();
                    
                    const dropdown = document.getElementById('departmentDropdown');
                    departments.forEach(department => {
                        const option = document.createElement('option');
                        option.value = department.department_id;
                        option.textContent = department.department_name;
                        dropdown.appendChild(option);
                    });

                    // Set the selected department based on the logged-in user (session info)
                    const currentDepartmentId = '<%= user.department_id %>'; // Assuming you pass session info from the backend
                    dropdown.value = currentDepartmentId;
                }

                fetchDetails();
                fetchDepartments();
                
                document.getElementById('saveProfile').addEventListener('click', async function (event) {
                    event.preventDefault(); // Prevent form from submitting immediately
                
                    // Show a confirmation alert before submitting
                    if (confirm("Are you sure you want to update your profile?")) {
                        const form = document.getElementById('profileForm');
                        const formData = new FormData(form);
                
                        // Convert form data to JSON
                        const data = {};
                        formData.forEach((value, key) => {
                            data[key] = value;
                        });
                
                        try {
                            const response = await fetch('/update-profile', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify(data)
                            });
                
                            const result = await response.json();
                
                            if (response.ok) {
                                alert(result.message);  // Show success message
                                window.location.href = '/home'; // Redirect to home after success
                            } else {
                                alert('Error: ' + result.message);  // Show error message
                            }
                        } catch (error) {
                            console.error('Error updating profile', error);
                            alert('An error occurred while updating the profile.');
                        }
                    }
                });
            }
            
            // timeline page javascript functions
            function initializeTimeline() {
                const timelineForm = document.getElementById('timeline-form');
                const timelineEntries = document.getElementById('timeline-entries');
                const timelineSubmit = document.getElementById('timeline-submit');
                let entries = {};
            
                // Fetch timeline entries from the server and render them
                async function fetchTimeline() {
                    try {
                        const response = await fetch('/api/timeline');
                        const data = await response.json();
                        console.log(data);
                        entries = data; // Store fetched entries
                        renderEntries(); // Render the fetched entries
                    } catch (error) {
                        console.error('Error fetching timeline:', error);
                    }
                }
            
                timelineForm.addEventListener('submit', async function (e) {
                    e.preventDefault();
            
                    // Get form values
                    const date = document.getElementById('timeline-year').value;
                    const description = document.getElementById('timeline-description').value;
                    let editId = timelineForm.dataset.editId;

                    // Check if we're updating or adding an entry
                    const isUpdate = document.getElementById('timeline-submit').textContent === 'Update Entry';

                    // Confirmation popup before proceeding
                    const isConfirmed = confirm('Are you sure you want to submit this entry?');
                    if (!isConfirmed) return;
            
                    // Disable the submit button and show loading state
                    timelineSubmit.disabled = true;
                    timelineSubmit.textContent = 'Loading...';

                    const entryData = {
                        date: date,
                        description,
                        episode_id: isUpdate ? editId : null // Send ID if updating
                    };
            
                    try {
                        // Send the data to the backend (update or insert)
                        const response = await fetch('/api/timeline', {
                            method: isUpdate ? 'PUT' : 'POST', // Use POST for create and PUT for update
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify(entryData) // Send the entry data to the backend
                        });
            
                        const result = await response.json();
            
                        if (response.ok) {
                            if (isUpdate) {
                                // Update the entry in the entries array
                                const index = entries.findIndex(entry => entry.episode_id === parseInt(editId, 10));
                                console.log(editId, index);
                                entries[index] = result; // Update with the new data from the response

                                editId = null;
                                alert('Entry updated successfully!');
                            } else {
                                // Add the new entry to the entries array
                                entries.push(result);
                                alert('Entry created successfully!');
                            }
            
                            renderEntries();
                            buttonsDisable(false);
                            timelineForm.reset();
                        } else {
                            alert('Error: ' + result.error);
                        }
                    } catch (err) {
                        console.error('Error:', err);
                        alert('An error occurred while saving the entry.');
                    } finally {
                        // Re-enable the submit button and reset text
                        timelineSubmit.disabled = false;
                        timelineSubmit.textContent = 'Add Entry';
                    }
                });
                
            
                function renderEntries() {
                    timelineEntries.innerHTML = '';
                    entries.forEach(entry => {
                        const li = document.createElement('li');
                        li.className = 'list-group-item d-flex justify-content-between align-items-center';
                        li.innerHTML = `
                            <div>
                                <strong>${entry.date}:</strong> ${entry.description}
                            </div>
                            <div>
                                <button class="btn edit-btn btn-outline-primary btn-sm me-2" onclick="editEntry(${entry.episode_id})">Edit</button>
                                <button class="btn delete-btn btn-outline-danger btn-sm" onclick="deleteEntry(${entry.episode_id})">Delete</button>
                            </div>
                        `;
                        timelineEntries.appendChild(li);
                    });
                }

                function buttonsDisable(condition) {
                    // Disable all buttons with the class 'edit-btn'
                    document.querySelectorAll('.edit-btn').forEach(button => {
                        button.disabled = condition; // Disable the button
                    });

                    // Disable all buttons with the class 'delete-btn'
                    document.querySelectorAll('.delete-btn').forEach(button => {
                        button.disabled = condition; // Disable the button
                    });
                }
            
                window.editEntry = function (id) {
                    const entry = entries.find(e => e.episode_id === id);
                    if (entry) {
                        document.getElementById('timeline-year').value = entry.date;
                        document.getElementById('timeline-description').value = entry.description;
                        document.getElementById('timeline-submit').textContent = 'Update Entry';
                        timelineForm.dataset.editId = id; // Store the ID of the entry being edited

                        buttonsDisable(true); // Disable buttons during editing
                        
                    }
                };
            
                window.deleteEntry = async function (id) {
                    
                    const isConfirmed = confirm('Are you sure you want to delete this entry?');
                    if (!isConfirmed) return;

                    const entryData = {
                        episode_id: id // Send ID if updating
                    };

                    try {
                        // Send the data to the backend (update or insert)
                        const response = await fetch('/api/timeline/delete', {
                            method: 'POST', // Use POST for create and PUT for update
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify(entryData) // Send the entry data to the backend
                        });
            
                        const result = await response.json();
            
                        if (response.ok) {
                            alert('Entry deleted successfully!');
                            
                            entries = entries.filter(e => e.episode_id !== id);
                            renderEntries();
                        } else {
                            alert('Error: ' + result.error);
                        }
                    } catch (err) {
                        console.error('Error:', err);
                        alert('An error occurred while deleting the entry.');
                    }

                };
            
                fetchTimeline(); // Fetch and render entries on initialization
            }
            
            // achievements page javascript functions
            function initializeAchievements(){
                const achievementsList = document.getElementById('achievements-list');
                const achievementFilter = document.getElementById('achievement-filter');
                const addAchievementBtn = document.getElementById('add-achievement-btn');
                const achievementModal = new bootstrap.Modal(document.getElementById('achievementModal'));
                const achievementForm = document.getElementById('achievement-form');
                const saveAchievementBtn = document.getElementById('save-achievement');
                const closeAchievementBtn = document.getElementById('close-achievement');
                let achievementIcons = {};
                let achievements = [];

                let isEditing = false;
                let editAchievementId = null;


                // Fetch achievements from the server and render them
                async function fetchAchievements() {
                    try {
                        const response = await fetch('/api/achievements');
                        const data = await response.json();
                        console.log(data);
                        achievements = data; // Store fetched entries
                        
                        renderAchievements(); // Render the fetched entries
                    } catch (error) {
                        console.error('Error fetching achievements:', error);
                    }
                }

                async function fetchAchievementTypes(containerName){
                    const container = document.getElementById(containerName);
                    try {
                        const response = await fetch('/api/achievement-types');
                        const data = await response.json();

                        // Clear the container first in case of re-fetching
                        container.innerHTML = '';

                        if(containerName === 'achievement-filter'){
                            // Add the 'All' option at the beginning
                            const allOption = document.createElement('option');
                            allOption.value = 'all'; // The value could be empty or something like 'all'
                            allOption.textContent = 'All Achievements'; // Display text for the 'All' option
                            container.appendChild(allOption);
                        }
                        
                        // Create and append option elements for each achievement type
                        data.forEach(type => {
                            const option = document.createElement('option'); // Create an option element
                            const name = type.name;
                            option.value = name; // Set the value attribute
                            option.setAttribute('data-achievement-id', type.achievement_id);

                            option.textContent = name.charAt(0).toUpperCase() + name.slice(1); // Set the display text
                            container.appendChild(option); // Append the option to the select tag

                            achievementIcons[name] = type.icon; // Store icon as a value in the object with name as key
                        });

                    } catch (error) {
                        console.error('Error fetching achievement types:', error);
                    }
                }

                window.editAchievement = function(id) {
                    const achievement = achievements.find(a => a.achievement_id === id);
                    openAchievementModal('edit', achievement);
                };
            
                window.deleteAchievement = async function(id) {
                    const isConfirmed = confirm('Are you sure you want to delete this achievement?');
                    if (!isConfirmed) return;

                    const entryData = {
                        achievement_id: id 
                    };

                    try {
                        const response = await fetch(`/api/achievement/delete`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify(entryData) // Send the entry data to the backend
                        });
            
                        if (response.ok) {
                            alert('Achievement deleted successfully!');
                            achievements = achievements.filter(a => a.achievement_id !== id); // Remove the deleted achievement from the list
                            renderAchievements(); // Re-render the updated achievements list
                        } else {
                            const error = await response.json();
                            alert('Error: ' + error.message);
                        }
                    } catch (error) {
                        console.error('Error deleting achievement:', error);
                        alert('An error occurred while trying to delete the achievement.');
                    }
                    
                };

                function renderAchievements(filter = 'all') {
                    const filteredAchievements = filter === 'all' 
                        ? achievements 
                        : achievements.filter(a => a.achievement_type === filter);

                        achievementsList.innerHTML = filteredAchievements.map((achievement, index) => `
                        <div class="card mb-3 ${index % 2 === 0 ? 'bg-light' : 'bg-white'}">
                            <div class="card-body">
                                <div class="row">
                                    <div class="col-2 col-md-1 d-flex align-items-center justify-content-center">
                                        ${achievementIcons[achievement.achievement_type]}
                                    </div>
                                    <div class="col-8 col-md-9">
                                        <h5 class="card-title">${achievement.title}</h5>
                                        <p class="card-text">${achievement.description}</p>
                                        <span class="badge bg-secondary">${achievement.date_achieved}</span>
                                    </div>
                                    <div class="col-2 col-md-2 d-flex align-items-center justify-content-end">
                                        <!-- Edit and Delete Icons -->
                                        <i class="bi bi-pencil-square mx-2 edit-icon" title="Edit" onclick="editAchievement(${achievement.achievement_id})" style="cursor: pointer;"></i>
                                        <i class="bi bi-trash-fill delete-icon" title="Delete" onclick="deleteAchievement(${achievement.achievement_id})" style="cursor: pointer;"></i>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `).join('');
                }

                function openAchievementModal(action, achievement = null) {
                    // Reset the form first
                    achievementForm.reset();

                    const modalElement = document.getElementById('achievementModal');
                
                    if (action === 'edit') {
                        isEditing = true;
                        editAchievementId = achievement.achievement_id; // Store the ID for updating
                        modalElement.querySelector('.modal-title').textContent = 'Edit Achievement';
                        modalElement.querySelector('#save-achievement').textContent = 'Update Changes';
                
                        // Populate the fields with the existing achievement data
                        document.getElementById('achievement-title').value = achievement.title;
                        document.getElementById('achievement-description').value = achievement.description;
                        document.getElementById('achievement-year').value = achievement.date_achieved;
                
                        // Set the achievement type
                        const achievementTypeSelect = document.getElementById('achievement-type');
                        fetchAchievementTypes('achievement-type').then(() => {
                            const option = Array.from(achievementTypeSelect.options).find(
                                opt => opt.value === achievement.achievement_type.toString()
                            );
                            if (option) option.selected = true;
                        });
                    } else {
                        isEditing = false;
                        editAchievementId = null;
                        modalElement.querySelector('.modal-title').textContent = 'Add Achievement';
                        modalElement.querySelector('#save-achievement').textContent = 'Add Achievement';
                
                        // Fetch the types for creating a new achievement
                        fetchAchievementTypes('achievement-type');
                    }
                
                    achievementModal.show();
                }

                achievementFilter.addEventListener('change', function() {
                    renderAchievements(this.value);
                });

                addAchievementBtn.addEventListener('click', function() {
                    achievementModal.show();
                    fetchAchievementTypes('achievement-type');
                });

                saveAchievementBtn.addEventListener('click', async function() {
                    const title = document.getElementById('achievement-title').value;
                    const description = document.getElementById('achievement-description').value;
                    const date_achieved = document.getElementById('achievement-year').value;
                    const achievement_id = editAchievementId;

                    // Get the selected option from the achievement-type select
                    const achievementTypeSelect = document.getElementById('achievement-type');
                    const selectedOption = achievementTypeSelect.options[achievementTypeSelect.selectedIndex];
                    const achievement_type = selectedOption.dataset.achievementId;
                 
                    let newAchievement = {};

                    if (isEditing) {
                        newAchievement = { achievement_id, title, description, date_achieved, achievement_type };
                    } else {
                        newAchievement = { title, description, date_achieved, achievement_type };
                    }
                
                    const isConfirmed = confirm('Are you sure you want to submit this entry?');
                    if (!isConfirmed) return;
                
                    saveAchievementBtn.disabled = true;
                    closeAchievementBtn.disabled = true;
                    saveAchievementBtn.textContent = 'Loading...';
                
                    try {
                        const method = isEditing ? 'PUT' : 'POST';
                        console.log(method);
                        const url = '/api/achievements';
                
                        // Send the data to the backend
                        const response = await fetch(url, {
                            method,
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(newAchievement)
                        });
                
                        const result = await response.json();
                
                        if (response.ok) {
                            alert(isEditing ? 'Entry updated successfully!' : 'Entry created successfully!');
                            if (isEditing) {
                                // Update the achievements array
                                const index = achievements.findIndex(a => a.achievement_id === editAchievementId);
                                achievements[index] = result;
                            } else {
                                achievements.push(result);
                            }
                
                            renderAchievements();
                            achievementModal.hide();
                            achievementForm.reset();
                        } else {
                            alert('Error: ' + result.error);
                        }
                    } catch (err) {
                        console.error('Error:', err);
                        alert('An error occurred while saving the entry.');
                    } finally {
                        isEditing = false;
                        editAchievementId = null;
                        saveAchievementBtn.disabled = false;
                        closeAchievementBtn.disabled = false;
                        saveAchievementBtn.textContent = 'Add Achievement';
                    }
                });
                
                // Button to open the modal for adding a new achievement
                addAchievementBtn.addEventListener('click', () => openAchievementModal('add'));

                fetchAchievementTypes('achievement-filter'); // Store achievement types for filters
                fetchAchievements();
                
            }

            // organizations page javascript functions
            function initializeOrganizations() {
                const addOrgBtn = document.getElementById('add-org-btn');
                const orgList = document.getElementById('org-list');
                const orgForm = document.getElementById('org-form');
                const orgModal = new bootstrap.Modal(document.getElementById('orgModal'));
                const orgTypeFilter = document.getElementById('org-type-filter');
            
                let organizations = [];  // Replace this with data fetching logic from your database
                let currentOrgId = null;

                const currentYear = new Date().getFullYear();
                const startYear = 1950; // Start year for the dropdowns
                const dateJoinedDropdown = document.getElementById('org-date-joined');
                const dateActiveDropdown = document.getElementById('org-date-active');

                // Populate year dropdowns
                for (let year = currentYear; year >= startYear; year--) {
                    const option = document.createElement('option');
                    option.value = year;
                    option.textContent = year;
                    dateJoinedDropdown.appendChild(option);

                    const activeOption = option.cloneNode(true);
                    dateActiveDropdown.insertBefore(activeOption, dateActiveDropdown.firstChild);
                }

                // Ensure "Present" is the first option in Date Active
                const presentOption = document.createElement('option');
                presentOption.value = 'present';
                presentOption.textContent = 'Present';
                dateActiveDropdown.insertBefore(presentOption, dateActiveDropdown.firstChild);

                async function fetchOrganizations(){
                    try {
                        const response = await fetch('/api/organizations');
                        const data = await response.json();
                        organizations = data;
                        renderOrganizations();
                    } catch (err) {
                        console.error('Error:', err);
                        alert('An error occurred while fetching organizations.');
                    }
                }
            
                // Handle add organization button click
                addOrgBtn.addEventListener('click', () => {
                    currentOrgId = null;
                    orgForm.reset();
                    document.getElementById('orgModalLabel').textContent = 'Add Organization';
                    orgForm.querySelector('button[type="submit"]').textContent = 'Add Organization';
                    orgModal.show();
                });
            
                orgForm.addEventListener('submit', async function (e) {
                    e.preventDefault();
                
                    const name = document.getElementById('org-name').value.trim();
                    const type = document.getElementById('org-type').value.trim();
                    const bannerFile = document.getElementById('org-banner').files[0];
                    const logoFile = document.getElementById('org-image').files[0];
                
                    // Check if editing an existing organization
                    if (currentOrgId) {
                        const orgIndex = organizations.findIndex(org => org.organization_id === currentOrgId);
                        organizations[orgIndex] = { ...organizations[orgIndex], org_name: name, org_type: type };
                
                        // Handle banner and logo updates if new files are provided
                        if (bannerFile) {
                            const bannerImage = await uploadImage(bannerFile, `${name}_banner`);
                            organizations[orgIndex].bannerUrl = bannerImage.url;
                        }
                
                        if (logoFile) {
                            const logoImage = await uploadImage(logoFile, `${name}_logo`);
                            organizations[orgIndex].logoUrl = logoImage.url;
                        }
                
                        renderOrganizations();
                    } else {
                        // Create a new organization entry
                        if (confirm('Are you sure you want to save this entry?')) {
                            createOrganization(name, type, bannerFile, logoFile);
                        }
                    }
                
                    orgModal.hide();
                });
                
                // Upload image to the server
                async function uploadImage(file, namePrefix) {
                    const formData = new FormData();
                    const extension = file.name.split('.').pop(); // Extract file extension
                    const fileName = `${namePrefix}.${extension}`; // Generate file name
                
                    // Determine the bucket based on the type of image
                    const bucket =
                        namePrefix.includes('banner') ? 'assets/orgBannerImages' : 'assets/employeeOrgsImages';
                
                    formData.append('file', file);
                    formData.append('bucket', bucket);
                    formData.append('fileName', fileName);

                    console.log('Uploading image: ', formData);
                
                    try {
                        const response = await fetch('/api/organizations/image', {
                            method: 'POST',
                            body: formData,
                        });
                
                        if (response.ok) {
                            return await response.json(); // Returns { bucket, fileName, url }
                        } else {
                            console.error('Failed to upload image:', response.statusText);
                        }
                    } catch (error) {
                        console.error('Error uploading image:', error);
                    }
                }
                
                // Add organization to the database
                async function createOrganization(name, type, bannerFile, logoFile) {
                    try {
                        const organizationData = { org_name: name, org_type: type };
                
                        // Upload the banner if provided
                        if (bannerFile) {
                            const bannerImage = await uploadImage(bannerFile, `${name}_banner`);
                            organizationData.banner_id = bannerImage.image_id;
                        }
                
                        // Upload the logo if provided
                        if (logoFile) {
                            const logoImage = await uploadImage(logoFile, `${name}_logo`);
                            organizationData.logo_id = logoImage.image_id;
                        }
                
                        // Send the organization data to the backend
                        const response = await fetch('/api/organizations', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(organizationData),
                        });
                
                        if (response.ok) {
                            const newOrg = await response.json(); // Backend should return the created organization
                            organizations.push(newOrg);
                            renderOrganizations();
                        } else {
                            console.error('Error adding organization:', response.statusText);
                        }
                    } catch (error) {
                        console.error('An error occurred while adding the organization:', error);
                    }
                }

                // Render organizations list
                function renderOrganizations() {
                    const selectedType = orgTypeFilter.value;
                    orgList.innerHTML = '';
            
                    organizations
                        .filter(org => selectedType === 'all' || org.org_type === selectedType)
                        .forEach(org => {
                            const col = document.createElement('div');
                            col.className = 'col';
                            col.innerHTML = `
                                <div class="card h-100 position-relative">
                                    <!-- Banner Image -->
                                    <img src="${org.banner_url || '/default-image.png'}" 
                                        class="card-img-top" 
                                        alt="${org.org_name}" 
                                        style="height: 200px; object-fit: cover;">

                                    <!-- Circular Logo -->
                                    <div class="logo-container position-absolute">
                                        <img src="${org.logo_url || '/default-logo.png'}" 
                                            alt="${org.org_name} Logo" 
                                            class="logo-circle">
                                    </div>

                                    <!-- Card Body -->
                                    <div class="card-body">
                                        <h5 class="card-title">${org.org_name}</h5>
                                        <h6 class="card-subtitle mb-2 text-muted">${org.org_type}</h6>
                                        <p class="card-text description" 
                                        title="${org.description || 'N/A'}">
                                        ${org.description 
                                                ? org.description.length > 100 
                                                    ? org.description.slice(0, 100) + '...' 
                                                    : org.description 
                                                : 'N/A'}
                                        </p>
                                        <p class="card-text">Position: ${org.position || 'N/A'}</p>
                                        <p class="card-text">Category: ${org.category || 'N/A'}</p>
                                        <p class="card-text">Date: ${org.date_joined || 'N/A'} - ${org.date_active || 'Present'}</p>
                                        
                                        <button class="btn btn-outline-primary btn-sm me-2 edit-org" data-id="${org.organization_id}">Edit</button>
                                        <button class="btn btn-outline-danger btn-sm delete-org" data-id="${org.organization_id}">Delete</button>
                                    </div>
                                </div>
                            `;
                            orgList.appendChild(col);
                        });
            
                    // Event listeners for edit and delete buttons
                    document.querySelectorAll('.edit-org').forEach(btn => {
                        btn.addEventListener('click', function () {
                            const orgId = parseInt(this.getAttribute('data-id'));
                            const org = organizations.find(o => o.organization_id === orgId);
                            if (org) {
                                currentOrgId = org.organization_id;
                                document.getElementById('org-name').value = org.org_name;
                                document.getElementById('org-type').value = org.org_type;
                                document.getElementById('orgModalLabel').textContent = 'Edit Organization';
                                orgForm.querySelector('button[type="submit"]').textContent = 'Update Organization';
                                orgModal.show();
                            }
                        });
                    });
            
                    document.querySelectorAll('.delete-org').forEach(btn => {
                        btn.addEventListener('click', function () {
                            const orgId = parseInt(this.getAttribute('data-id'));
                            organizations = organizations.filter(org => org.organization_id !== orgId);
                            renderOrganizations();
                        });
                    });
                }

                // Event listener for the filter dropdown
                orgTypeFilter.addEventListener('change', renderOrganizations);
                fetchOrganizations();
            }
            

            // contacts page javascript functions
            function initializeContacts(){
                const editToggle = document.getElementById('edit-toggle');
                const contactForm = document.getElementById('contact-form');
                const contactName = document.getElementById('contact-name');
                const contactTitle = document.getElementById('contact-title');
                const consultationHours = document.getElementById('consultation-hours');
                const socialMediaList = document.getElementById('social-media-list');
                const addSocialMediaBtn = document.getElementById('add-social-media');

                let editMode = false;

                const daysOfWeek = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];

                let contactInfo = {
                    name: '',
                    title: '',
                    
                    // Default consultation hours if no schedule is retrieved
                    consultationHours: daysOfWeek.map(day => ({
                        day,
                        available: false, // Default to not available
                        startTime: '09:00', // Default start time
                        endTime: '17:00' // Default end time
                    })),
                    
                };

                async function fetchContacts() {
                    console.log('Fetching details');
                    try {
                        const response = await fetch('/api/contacts');
                        const data = await response.json();
                        console.log(data);

                        const contacts = data.contacts;
                        const schedule = data.schedule;

                        contactInfo.contactId = contacts.contact_id;

                        contactInfo.name  = data.name;
                        contactInfo.title = data.position;
                        
                
                        // Update the fields in contactInfo based on the fetched contact data
                        contactInfo.phone = contacts.phone_number;
                        contactInfo.landline = contacts.landline;
                        contactInfo.email = contacts.email;
                
                        // Update social media URLs
                        contactInfo.socialMedia = [
                            { platform: 'facebook', url: contacts.facebook_url || "" },
                            { platform: 'instagram', url: contacts.instagram_url || "" },
                            { platform: 'linkedin', url: contacts.linkedin_url || "" }
                        ];

                        // Update consultation hours based on fetched schedule data or keep defaults
                        schedule.forEach(entry => {
                            const dayIndex = daysOfWeek.indexOf(entry.day); // Find the index of the day in daysOfWeek
                            if (dayIndex !== -1) {
                                contactInfo.consultationHours[dayIndex] = {
                                    schedule_id: entry.schedule_id,
                                    day: entry.day,
                                    available: entry.available, // Set available if there's a schedule for this day
                                    startTime: entry.start_time,
                                    endTime: entry.end_time
                                };
                            }
                        });

                        renderContactInfo();
                        renderConsultationHours();
                        renderSocialMedia();
                        
                        console.log('Updated contact info:', contactInfo);
                    } catch (error) {
                        console.error('Error fetching contacts:', error);
                    }
                }
                

                const socialMediaIcons = {
                    facebook: '<i class="bi bi-facebook"></i>',
                    instagram: '<i class="bi bi-instagram"></i>',
                    linkedin: '<i class="bi bi-linkedin"></i>',
                    // github: '<i class="bi bi-github"></i>',
                    // youtube: '<i class="bi bi-youtube"></i>',
                    // twitter: '<i class="bi bi-twitter"></i>',
                };

                function renderContactInfo() {
                    contactName.textContent = contactInfo.name;
                    contactTitle.textContent = contactInfo.title;
                    document.getElementById('phone').value = contactInfo.phone;
                    document.getElementById('landline').value = contactInfo.landline;
                    document.getElementById('email').value = contactInfo.email;
                }

                function renderConsultationHours() {
                    consultationHours.innerHTML = contactInfo.consultationHours.map((hour, index) => `
                        <div class="row mb-2 align-items-center">
                            <div class="col-3">
                                <div class="form-check form-switch">
                                    <input class="form-check-input" type="checkbox" id="available-${hour.day}" 
                                        ${hour.available ? 'checked' : ''} ${!editMode ? 'disabled' : ''}
                                        data-index="${index}" data-field="available">
                                    <label class="form-check-label" for="available-${hour.day}">${hour.day}</label>
                                </div>
                            </div>
                            <div class="col-9">
                                <div class="input-group">
                                    <input type="time" class="form-control" value="${hour.startTime}" 
                                        data-index="${index}" data-field="startTime" 
                                        ${!editMode || !hour.available ? 'disabled' : ''}>
                                    <span class="input-group-text">to</span>
                                    <input type="time" class="form-control" value="${hour.endTime}" 
                                        data-index="${index}" data-field="endTime" 
                                        ${!editMode || !hour.available ? 'disabled' : ''}>
                                </div>
                            </div>
                        </div>
                    `).join('');
                }

                function renderSocialMedia() {
                    socialMediaList.innerHTML = contactInfo.socialMedia.map((social, index) => `
                        <li class="list-group-item d-flex align-items-center">
                            <div class="me-2">${socialMediaIcons[social.platform]}</div>
                            <span class="me-2" style="width: 150px;">
                                ${social.platform.charAt(0).toUpperCase() + social.platform.slice(1)}
                            </span>
                            <input type="url" class="form-control" placeholder="Enter your ${social.platform.charAt(0).toUpperCase() + social.platform.slice(1)} url" value="${social.url}" data-index="${index}" ${!editMode ? 'disabled' : ''}>
                        </li>
                    `).join('');
                    //${editMode ? `
                    //            <button class="btn btn-danger btn-sm ms-2 remove-social-media" data-index="${index}">Remove</button>
                    //        ` : ''}
                }
                

                async function toggleEditMode() {
                    editMode = !editMode;
                    editToggle.textContent = editMode ? 'Save' : 'Edit';
                    // addSocialMediaBtn.style.display = editMode ? 'block' : 'none';
                    
                    const inputs = contactForm.querySelectorAll('input, select');
                    inputs.forEach(input => input.disabled = !editMode);

                    if (!editMode) {
                        const isConfirmed = confirm('Are you sure you want to save changes?');
                        if (!isConfirmed) {
                            editToggle.disabled = false; // Re-enable if saving was cancelled
                        }
                
                        editToggle.disabled = true; // Disable the button while saving
                        editToggle.textContent = 'Saving...'; // Change button text to "Loading..." while saving
                
                        try {
                            await saveContactInfo(); // Call the save function
                            editToggle.textContent = 'Edit'; // Revert button text to "Edit" after successful save
                        } catch (error) {
                            console.error('Failed to save contact info:', error);
                            alert('An error occurred while saving. Please try again.');
                            editToggle.textContent = 'Save'; // Keep "Save" text in case of error, to retry
                        }
                    }
                
                    editToggle.disabled = false; // Re-enable the button after save is complete
                    renderConsultationHours();
                    renderSocialMedia();
                }

                async function saveContactInfo() {
                    // Gather data from contactInfo
                    const updatedContactInfo = {
                        contact_id: contactInfo.contactId,
                        phone_number: contactInfo.phone,
                        landline: contactInfo.landline,
                        email: contactInfo.email,
                        facebook_url: contactInfo.socialMedia.find(social => social.platform === 'facebook')?.url || "",
                        instagram_url: contactInfo.socialMedia.find(social => social.platform === 'instagram')?.url || "",
                        linkedin_url: contactInfo.socialMedia.find(social => social.platform === 'linkedin')?.url || ""
                    };

                    // Collect the updated schedule
                    const updatedSchedule = contactInfo.consultationHours.map(hour => {
                        // Create an object without schedule_id initially
                        const scheduleEntry = {
                            day: hour.day,
                            available: hour.available,
                            start_time: hour.startTime,
                            end_time: hour.endTime,
                        };
                    
                        // Conditionally add schedule_id only if it exists
                        if (hour.schedule_id) {
                            scheduleEntry.schedule_id = hour.schedule_id;
                        }
                    
                        return scheduleEntry;
                    });

                    let errors = {};

                    console.log("New contact info: "+ JSON.stringify(updatedSchedule));
                
                    try {
                        // Send the updated data to the backend
                        const contactResponse = await fetch('/api/contacts', {
                            method: 'PUT', 
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(updatedContactInfo)
                        });

                        if (!contactResponse.ok) {
                            throw new Error('Failed to save contact information');
                            errors.contacts = 'Failed to save contact information';

                        }

                        const updatedContacts = await contactResponse.json();
                        console.log('Contact information saved:', updatedContacts);

                        // Send the updated data to the backend
                        const scheduleResponse = await fetch('/api/contacts/schedule', {
                            method: 'POST', 
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify(updatedSchedule)
                        });

                        if (!scheduleResponse.ok) {
                            throw new Error('Failed to save schedule');
                            errors.schedule = 'Failed to save schedule';
                        }

                        const successSchedule = await scheduleResponse.json();
                        console.log('Contact information saved:', successSchedule);

                        
                        alert('Contact information saved successfully!');
                    } catch (error) {
                        console.error('Error saving contact information:', error);
                        alert('An error occurred while saving the contact information.');
                    }
                }

                editToggle.addEventListener('click', toggleEditMode);

                contactForm.addEventListener('change', function(e) {
                    if (e.target.matches('#phone, #landline, #email')) {
                        contactInfo[e.target.name] = e.target.value;
                    }
                });

                consultationHours.addEventListener('change', function(e) {
                    if (e.target.matches('input[type="checkbox"]')) {
                        const index = parseInt(e.target.dataset.index);
                        const available = e.target.checked;
                        contactInfo.consultationHours[index].available = available;
                        renderConsultationHours();
                    } else if (e.target.matches('input[type="time"]')) {
                        const index = parseInt(e.target.dataset.index);
                        const field = e.target.dataset.field;
                        contactInfo.consultationHours[index][field] = e.target.value;
                    }
                });

                socialMediaList.addEventListener('change', function(e) {
                    if (e.target.matches('select, input')) {
                        const index = parseInt(e.target.dataset.index);
                        const field = e.target.tagName === 'SELECT' ? 'platform' : 'url';
                        contactInfo.socialMedia[index][field] = e.target.value;
                    }
                });

                socialMediaList.addEventListener('click', function(e) {
                    if (e.target.matches('.remove-social-media')) {
                        const index = parseInt(e.target.dataset.index);
                        contactInfo.socialMedia.splice(index, 1);
                        renderSocialMedia();
                    }
                });

                addSocialMediaBtn.addEventListener('click', function() {
                    contactInfo.socialMedia.push({ platform: 'facebook', url: '' });
                    renderSocialMedia();
                });

                fetchContacts();

            }

            initializeOverview();
                
        });
    </script>
</body>
</html>