<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css">
    <style>
        body {
            background-color: #f8f9fa;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        .sidebar {
            height: 100vh;
            background-color: #ffffff;
            color: #333333;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        .main-content {
            height: 100vh;
            overflow-y: auto;
            padding: 20px;
        }
        .card {
            border-radius: 10px;
            border: none;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
        .nav-link {
            color: #333333;
            border-radius: 5px;
            margin-bottom: 5px;
        }
        .nav-link:hover, .nav-link.active {
            background-color: #e9ecef;
        }
        .btn-custom {
            background-color: #3b82f6;
            color: white;
            border-radius: 5px;
        }
        .btn-custom:hover {
            background-color: #2563eb;
            color: white;
        }
        .top-bar {
            background-color: #3b82f6;
            color: white;
            padding: 10px 0;
        }
        .profile-section {
            display: flex;
            align-items: center;
            justify-content: flex-end;
        }
        .profile-icon {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: #e9ecef;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-left: 10px;
        }
        .no-data-found {
            text-align: center;
            padding: 50px 0;
        }
        .no-data-found img {
            max-width: 200px;
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <div class="container-fluid">
        <div class="row">
            <!-- Top Bar -->
            <div class="col-12 top-bar">
                <div class="container">
                    <div class="row align-items-center">
                        <div class="col-6">
                            <h3 class="m-0">Content Management System</h3>
                        </div>
                        <div class="col-6 profile-section">
                            <div class="profile-icon">
                                <i class="bi bi-bell"></i>
                            </div>
                            <div class="profile-icon">
                                <i class="bi bi-chat"></i>
                            </div>
                            <div class="profile-icon">
                                <i class="bi bi-person"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Sidebar -->
            <%- include('../resources/views/pages/user/partials/sidenav.ejs') %>

            <!-- Main content -->
            <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4 main-content">
                
            </main>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Navigation handling
        document.addEventListener('DOMContentLoaded', function() {
            const navLinks = document.querySelectorAll('.sidebar .nav-link');
            const contentSections = document.querySelectorAll('.content-section');

            navLinks.forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault();

                    const targetSection = this.getAttribute('data-section');

                    // Update active states for nav links
                    navLinks.forEach(l => l.classList.remove('active'));
                    this.classList.add('active');

                    // Show the corresponding content section and hide others
                    contentSections.forEach(section => {
                        if (section.id === targetSection) {
                            section.classList.add('active');
                            section.style.display = "block";
                        } else {
                            section.classList.remove('active');
                            section.style.display = "none";
                        }
                    });
                });
            });
        });

        //Consultation Hours Javascript
        document.addEventListener('DOMContentLoaded', function() {
    const editToggle = document.getElementById('edit-toggle');
    const contactForm = document.getElementById('contact-form');
    const contactName = document.getElementById('contact-name');
    const contactTitle = document.getElementById('contact-title');
    const consultationHours = document.getElementById('consultation-hours');
    const socialMediaList = document.getElementById('social-media-list');
    const addSocialMediaBtn = document.getElementById('add-social-media');

    let editMode = false;

    const daysOfWeek = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];

    const contactInfo = {
        name: 'Dr. John Carlo',
        title: 'Professor',
        phone: '09696969696',
        landline: '09696969696',
        email: 'john@example.com',
        consultationHours: daysOfWeek.map(day => ({
            day,
            available: day !== 'Sunday',
            startTime: '14:00',
            endTime: '16:00'
        })),
        socialMedia: [
            { platform: 'facebook', url: 'https://facebook.com' },
            { platform: 'twitter', url: 'https://twitter.com' },
            { platform: 'instagram', url: 'https://instagram.com' },
        ],
    };

    const socialMediaIcons = {
        facebook: '<i class="bi bi-facebook"></i>',
        twitter: '<i class="bi bi-twitter"></i>',
        instagram: '<i class="bi bi-instagram"></i>',
        linkedin: '<i class="bi bi-linkedin"></i>',
        github: '<i class="bi bi-github"></i>',
        youtube: '<i class="bi bi-youtube"></i>',
    };

    function renderContactInfo() {
        contactName.textContent = contactInfo.name;
        contactTitle.textContent = contactInfo.title;
        document.getElementById('phone').value = contactInfo.phone;
        document.getElementById('landline').value = contactInfo.landline;
        document.getElementById('email').value = contactInfo.email;
    }

    function renderConsultationHours() {
        consultationHours.innerHTML = contactInfo.consultationHours.map((hour, index) => `
            <div class="row mb-2 align-items-center">
                <div class="col-3">
                    <div class="form-check form-switch">
                        <input class="form-check-input" type="checkbox" id="available-${hour.day}" 
                               ${hour.available ? 'checked' : ''} ${!editMode ? 'disabled' : ''}
                               data-index="${index}" data-field="available">
                        <label class="form-check-label" for="available-${hour.day}">${hour.day}</label>
                    </div>
                </div>
                <div class="col-9">
                    <div class="input-group">
                        <input type="time" class="form-control" value="${hour.startTime}" 
                               data-index="${index}" data-field="startTime" 
                               ${!editMode || !hour.available ? 'disabled' : ''}>
                        <span class="input-group-text">to</span>
                        <input type="time" class="form-control" value="${hour.endTime}" 
                               data-index="${index}" data-field="endTime" 
                               ${!editMode || !hour.available ? 'disabled' : ''}>
                    </div>
                </div>
            </div>
        `).join('');
    }

    function renderSocialMedia() {
        socialMediaList.innerHTML = contactInfo.socialMedia.map((social, index) => `
            <li class="list-group-item d-flex align-items-center">
                <div class="me-2">${socialMediaIcons[social.platform]}</div>
                <select class="form-select me-2" style="width: 150px;" data-index="${index}" ${!editMode ? 'disabled' : ''}>
                    ${Object.keys(socialMediaIcons).map(platform => `
                        <option value="${platform}" ${platform === social.platform ? 'selected' : ''}>
                            ${platform.charAt(0).toUpperCase() + platform.slice(1)}
                        </option>
                    `).join('')}
                </select>
                <input type="url" class="form-control" value="${social.url}" data-index="${index}" ${!editMode ? 'disabled' : ''}>
                ${editMode ? `
                    <button class="btn btn-danger btn-sm ms-2 remove-social-media" data-index="${index}">Remove</button>
                ` : ''}
            </li>
        `).join('');
    }

    function toggleEditMode() {
        editMode = !editMode;
        editToggle.textContent = editMode ? 'Save' : 'Edit';
        addSocialMediaBtn.style.display = editMode ? 'block' : 'none';
        
        const inputs = contactForm.querySelectorAll('input, select');
        inputs.forEach(input => input.disabled = !editMode);

        renderConsultationHours();
        renderSocialMedia();
    }

    editToggle.addEventListener('click', toggleEditMode);

    contactForm.addEventListener('change', function(e) {
        if (e.target.matches('#phone, #landline, #email')) {
            contactInfo[e.target.name] = e.target.value;
        }
    });

    consultationHours.addEventListener('change', function(e) {
        if (e.target.matches('input[type="checkbox"]')) {
            const index = parseInt(e.target.dataset.index);
            const available = e.target.checked;
            contactInfo.consultationHours[index].available = available;
            renderConsultationHours();
        } else if (e.target.matches('input[type="time"]')) {
            const index = parseInt(e.target.dataset.index);
            const field = e.target.dataset.field;
            contactInfo.consultationHours[index][field] = e.target.value;
        }
    });

    socialMediaList.addEventListener('change', function(e) {
        if (e.target.matches('select, input')) {
            const index = parseInt(e.target.dataset.index);
            const field = e.target.tagName === 'SELECT' ? 'platform' : 'url';
            contactInfo.socialMedia[index][field] = e.target.value;
        }
    });

    socialMediaList.addEventListener('click', function(e) {
        if (e.target.matches('.remove-social-media')) {
            const index = parseInt(e.target.dataset.index);
            contactInfo.socialMedia.splice(index, 1);
            renderSocialMedia();
        }
    });

    addSocialMediaBtn.addEventListener('click', function() {
        contactInfo.socialMedia.push({ platform: 'facebook', url: '' });
        renderSocialMedia();
    });

    renderContactInfo();
    renderConsultationHours();
    renderSocialMedia();
});
//Achivements Page Javascript
        document.addEventListener('DOMContentLoaded', function() {
    const achievementsList = document.getElementById('achievements-list');
    const achievementFilter = document.getElementById('achievement-filter');
    const addAchievementBtn = document.getElementById('add-achievement-btn');
    const achievementModal = new bootstrap.Modal(document.getElementById('achievementModal'));
    const achievementForm = document.getElementById('achievement-form');
    const saveAchievementBtn = document.getElementById('save-achievement');

    let achievements = [
        { id: 1, title: "Best Paper Award, ICML 2022", description: "For 'Interpretable Deep Learning in Dynamic Decision Processes'", year: 2022, type: "award" },
        { id: 2, title: "1M+ students taught worldwide", description: "Through online courses and in-person lectures", year: 2022, type: "teaching" },
        { id: 3, title: "IEEE Fellow, 2020", description: "For contributions to machine learning and AI ethics", year: 2020, type: "recognition" },
        { id: 4, title: "25+ Ph.D. students supervised", description: "Many now leading researchers in academia and industry", year: 2022, type: "supervision" },
        { id: 5, title: "World Economic Forum Technology Pioneer, 2019", description: "Recognized for contributions to AI for social good", year: 2019, type: "recognition" },
    ];

    const achievementIcons = {
        award: '<i class="bi bi-award"></i>',
        teaching: '<i class="bi bi-people"></i>',
        recognition: '<i class="bi bi-trophy"></i>',
        supervision: '<i class="bi bi-book"></i>',
        other: '<i class="bi bi-globe"></i>',
    };

    function renderAchievements(filter = 'all') {
        const filteredAchievements = filter === 'all' 
            ? achievements 
            : achievements.filter(a => a.type === filter);

        achievementsList.innerHTML = filteredAchievements.map((achievement, index) => `
            <div class="card mb-3 ${index % 2 === 0 ? 'bg-light' : 'bg-white'}">
                <div class="card-body">
                    <div class="row">
                        <div class="col-2 col-md-1 d-flex align-items-center justify-content-center">
                            ${achievementIcons[achievement.type]}
                        </div>
                        <div class="col-10 col-md-11">
                            <h5 class="card-title">${achievement.title}</h5>
                            <p class="card-text">${achievement.description}</p>
                            <span class="badge bg-secondary">${achievement.year}</span>
                        </div>
                    </div>
                </div>
            </div>
        `).join('');
    }

    achievementFilter.addEventListener('change', function() {
        renderAchievements(this.value);
    });

    addAchievementBtn.addEventListener('click', function() {
        achievementModal.show();
    });

    saveAchievementBtn.addEventListener('click', function() {
        const title = document.getElementById('achievement-title').value;
        const description = document.getElementById('achievement-description').value;
        const year = parseInt(document.getElementById('achievement-year').value);
        const type = document.getElementById('achievement-type').value;

        const newAchievement = { id: Date.now(), title, description, year, type };
        achievements.push(newAchievement);
        renderAchievements(achievementFilter.value);
        achievementModal.hide();
        achievementForm.reset();
    });

    renderAchievements();
});

//Overview Javascript Page

document.addEventListener('DOMContentLoaded', function() {
    const saveButton = document.querySelector('#saveProfile');

    let profileData = {
        personal: {},
        professional: {}
    };

    function updateProfileData() {
        profileData.personal = {
            firstName: document.getElementById('firstName').value,
            middleName: document.getElementById('middleName').value,
            lastName: document.getElementById('lastName').value,
            honorifics: document.getElementById('honorifics').value,
            introduction: document.getElementById('introduction').value
        };
        profileData.professional = {
            position: document.getElementById('position').value,
            researchFields: Array.from(document.getElementById('researchFields').selectedOptions).map(option => option.value),
            department: document.getElementById('department').value
        };
    }

    saveButton.addEventListener('click', function(e) {
        e.preventDefault();
        updateProfileData();
        console.log('Profile data saved:', profileData);
        alert('Profile saved successfully!');
    });
});

//Timeline Page Javascript

document.addEventListener('DOMContentLoaded', function() {
    const timelineForm = document.getElementById('timeline-form');
    const timelineEntries = document.getElementById('timeline-entries');
    let entries = [];

    timelineForm.addEventListener('submit', function(e) {
        e.preventDefault();
        const year = document.getElementById('timeline-year').value;
        const description = document.getElementById('timeline-description').value;
        
        entries.push({ id: Date.now(), year, description });
        renderEntries();
        timelineForm.reset();
    });

    function renderEntries() {
        timelineEntries.innerHTML = '';
        entries.forEach(entry => {
            const li = document.createElement('li');
            li.className = 'list-group-item d-flex justify-content-between align-items-center';
            li.innerHTML = `
                <div>
                    <strong>${entry.year}:</strong> ${entry.description}
                </div>
                <div>
                    <button class="btn btn-outline-primary btn-sm me-2" onclick="editEntry(${entry.id})">Edit</button>
                    <button class="btn btn-outline-danger btn-sm" onclick="deleteEntry(${entry.id})">Delete</button>
                </div>
            `;
            timelineEntries.appendChild(li);
        });
    }

    window.editEntry = function(id) {
        const entry = entries.find(e => e.id === id);
        if (entry) {
            document.getElementById('timeline-year').value = entry.year;
            document.getElementById('timeline-description').value = entry.description;
            document.getElementById('timeline-submit').textContent = 'Update Entry';
            timelineForm.onsubmit = function(e) {
                e.preventDefault();
                entry.year = document.getElementById('timeline-year').value;
                entry.description = document.getElementById('timeline-description').value;
                renderEntries();
                timelineForm.reset();
                document.getElementById('timeline-submit').textContent = 'Add Entry';
                timelineForm.onsubmit = null;
            };
        }
    };

    window.deleteEntry = function(id) {
        entries = entries.filter(e => e.id !== id);
        renderEntries();
    };
});

// Organization Page Javascript
document.addEventListener('DOMContentLoaded', function() {
    const addOrgBtn = document.getElementById('add-org-btn');
    const orgList = document.getElementById('org-list');
    const orgForm = document.getElementById('org-form');
    const orgModal = new bootstrap.Modal(document.getElementById('orgModal'));
    let organizations = [];
    let currentOrgId = null;

    addOrgBtn.addEventListener('click', () => {
        currentOrgId = null;
        orgForm.reset();
        document.getElementById('orgModalLabel').textContent = 'Add Organization';
        orgForm.querySelector('button[type="submit"]').textContent = 'Add Organization';
        orgModal.show();
    });

    orgForm.addEventListener('submit', function(e) {
        e.preventDefault();
        const name = document.getElementById('org-name').value;
        const role = document.getElementById('org-role').value;
        const description = document.getElementById('org-description').value;
        const imageFile = document.getElementById('org-image').files[0];

        if (currentOrgId) {
            const index = organizations.findIndex(org => org.id === currentOrgId);
            organizations[index] = { ...organizations[index], name, role, description };
            if (imageFile) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    organizations[index].imageUrl = e.target.result;
                    renderOrganizations();
                };
                reader.readAsDataURL(imageFile);
            } else {
                renderOrganizations();
            }
        } else {
            const newOrg = { id: Date.now(), name, role, description };
            if (imageFile) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    newOrg.imageUrl = e.target.result;
                    organizations.push(newOrg);
                    renderOrganizations();
                };
                reader.readAsDataURL(imageFile);
            } else {
                organizations.push(newOrg);
                renderOrganizations();
            }
        }

        orgModal.hide();
    });

    function renderOrganizations() {
        orgList.innerHTML = '';
        organizations.forEach(org => {
            const col = document.createElement('div');
            col.className = 'col';
            col.innerHTML = `
                <div class="card h-100">
                    ${org.imageUrl ? `<img src="${org.imageUrl}" class="card-img-top" alt="${org.name}">` : ''}
                    <div class="card-body">
                        <h5 class="card-title">${org.name}</h5>
                        <h6 class="card-subtitle mb-2 text-muted">${org.role}</h6>
                        <p class="card-text">${org.description}</p>
                        <button class="btn btn-outline-primary btn-sm me-2 edit-org" data-id="${org.id}">Edit</button>
                        <button class="btn btn-outline-danger btn-sm delete-org" data-id="${org.id}">Delete</button>
                    </div>
                </div>
            `;
            orgList.appendChild(col);
        });

        // Add event listeners for edit and delete buttons
        document.querySelectorAll('.edit-org').forEach(btn => {
            btn.addEventListener('click', function() {
                const orgId = parseInt(this.getAttribute('data-id'));
                const org = organizations.find(o => o.id === orgId);
                if (org) {
                    currentOrgId = org.id;
                    document.getElementById('org-name').value = org.name;
                    document.getElementById('org-role').value = org.role;
                    document.getElementById('org-description').value = org.description;
                    document.getElementById('orgModalLabel').textContent = 'Edit Organization';
                    orgForm.querySelector('button[type="submit"]').textContent = 'Update Organization';
                    orgModal.show();
                }
            });
        });

        document.querySelectorAll('.delete-org').forEach(btn => {
            btn.addEventListener('click', function() {
                const orgId = parseInt(this.getAttribute('data-id'));
                organizations = organizations.filter(org => org.id !== orgId);
                renderOrganizations();
            });
        });
    }
});
    </script>
</body>
</html>