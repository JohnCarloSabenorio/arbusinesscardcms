<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@yaireo/tagify/dist/tagify.css">
    <style>
        body {
            background-color: #f8f9fa;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        .sidebar {
            height: 100vh;
            background-color: #ffffff;
            color: #333333;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        .main-content {
            height: 100vh;
            overflow-y: auto;
            padding: 20px;
        }
        .card {
            border-radius: 10px;
            border: none;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
        .nav-link {
            color: #333333;
            border-radius: 5px;
            margin-bottom: 5px;
        }
        .nav-link:hover, .nav-link.active {
            background-color: #e9ecef;
        }
        .btn-custom {
            background-color: #3b82f6;
            color: white;
            border-radius: 5px;
        }
        .btn-custom:hover {
            background-color: #2563eb;
            color: white;
        }
        .top-bar {
            background-color: #3b82f6;
            color: white;
            padding: 10px 0;
        }
        .profile-section {
            display: flex;
            align-items: center;
            justify-content: flex-end;
        }
        .profile-icon {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: #e9ecef;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-left: 10px;
        }
        .no-data-found {
            text-align: center;
            padding: 50px 0;
        }
        .no-data-found img {
            max-width: 200px;
            margin-bottom: 20px;
        }
    </style>
</head>
<body>
    <div class="container-fluid">
        <div class="row">
            <!-- Top Bar -->
            <div class="col-12 top-bar">
                <div class="container">
                    <div class="row align-items-center">
                        <div class="col-6">
                            <h3 class="m-0">Content Management System</h3>
                        </div>
                        <div class="col-6 profile-section">
                            <div class="profile-icon">
                                <i class="bi bi-bell"></i>
                            </div>
                            <div class="profile-icon">
                                <i class="bi bi-chat"></i>
                            </div>
                            <div class="profile-icon">
                                <i class="bi bi-person"></i>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Sidebar -->
            <%- include('../resources/views/pages/user/partials/sidenav.ejs') %>

            <!-- Main content -->
            <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4 main-content">
                
                
                <!-- Content Section -->
                <%- include('../resources/views/pages/user/components/overview.ejs') %>
            </main>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@yaireo/tagify"></script>
    <script>
        // Navigation handling
        document.addEventListener('DOMContentLoaded', function() {
            const navLinks = document.querySelectorAll('.sidebar .nav-link');
            const mainContent = document.querySelector('.main-content');

            navLinks.forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault();
        
                    const targetSection = this.getAttribute('data-section');
        
                    // Update active states for nav links
                    navLinks.forEach(l => l.classList.remove('active'));
                    this.classList.add('active');
        
                    // Dynamically load the content for the clicked section
                    loadContent(targetSection);
                });
            });
        
            // Function to fetch the content from the server
            function loadContent(section) {
                fetch(`/home/${section}`) // Assumes you have a route for /load/:section
                    .then(response => response.text())
                    .then(html => {
                        mainContent.innerHTML = html; // Inject the HTML into the main content
                        if (section === 'overview'){
                            initializeOverview();
                        }else if (section === 'timeline'){
                            initializeTimeline();
                        }
                    })
                    .catch(error => {
                        console.error('Error loading content:', error);
                    });
            }
            // overview page javascript functions
            function initializeOverview() {
                let tagify;
                
                // Fetch current introduction from the server and populate the textarea
                async function fetchDetails() {
                    console.log('Fetching details');
                    const response = await fetch('/api/details');
                    const data = await response.json();
                    console.log(data);
                    
                    document.getElementById('introduction').value = data.introduction; 
                    document.getElementById('position').value = data.position;

                    let fieldsInput = document.getElementById('researchFields');
                    tagify = new Tagify(fieldsInput, {
                        delimiters: ",", // Tags are separated by commas
                        maxTags: 10,      // Optional limit
                        editTags: true    // Allow users to edit tags
                    });

                    tagify.addTags(data.fields);
                }

                // Fetch departments and populate dropdown
                async function fetchDepartments() {
                    const response = await fetch('/api/departments');
                    const departments = await response.json();
                    
                    const dropdown = document.getElementById('departmentDropdown');
                    departments.forEach(department => {
                        const option = document.createElement('option');
                        option.value = department.department_id;
                        option.textContent = department.department_name;
                        dropdown.appendChild(option);
                    });

                    // Set the selected department based on the logged-in user (session info)
                    const currentDepartmentId = '<%= user.department_id %>'; // Assuming you pass session info from the backend
                    dropdown.value = currentDepartmentId;
                }

                fetchDetails();
                fetchDepartments();
                
                document.getElementById('saveProfile').addEventListener('click', async function (event) {
                    event.preventDefault(); // Prevent form from submitting immediately
                
                    // Show a confirmation alert before submitting
                    if (confirm("Are you sure you want to update your profile?")) {
                        const form = document.getElementById('profileForm');
                        const formData = new FormData(form);
                
                        // Convert form data to JSON
                        const data = {};
                        formData.forEach((value, key) => {
                            data[key] = value;
                        });
                
                        try {
                            const response = await fetch('/update-profile', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify(data)
                            });
                
                            const result = await response.json();
                
                            if (response.ok) {
                                alert(result.message);  // Show success message
                                window.location.href = '/home'; // Redirect to home after success
                            } else {
                                alert('Error: ' + result.message);  // Show error message
                            }
                        } catch (error) {
                            console.error('Error updating profile', error);
                            alert('An error occurred while updating the profile.');
                        }
                    }
                });
            }
            
            // timeline page javascript functions
            function initializeTimeline() {
                const timelineForm = document.getElementById('timeline-form');
                const timelineEntries = document.getElementById('timeline-entries');
                let entries = {};
            
                // Fetch timeline entries from the server and render them
                async function fetchTimeline() {
                    try {
                        const response = await fetch('/api/timeline');
                        const data = await response.json();
                        console.log(data);
                        entries = data; // Store fetched entries
                        renderEntries(); // Render the fetched entries
                    } catch (error) {
                        console.error('Error fetching timeline:', error);
                    }
                }
            
                timelineForm.addEventListener('submit', function (e) {
                    e.preventDefault();
                    const year = document.getElementById('timeline-year').value;
                    const description = document.getElementById('timeline-description').value;
            
                    // Check if we're updating or adding an entry
                    const isUpdate = document.getElementById('timeline-submit').textContent === 'Update Entry';
            
                    if (isUpdate) {
                        // Find the entry to update
                        const entry = entries.find(e => e.id === parseInt(timelineForm.dataset.editId));
                        if (entry) {
                            entry.year = year;
                            entry.description = description;
                        }
                        document.getElementById('timeline-submit').textContent = 'Add Entry'; // Reset button text
                    } else {
                        // Create a new entry
                        entries.push({ id: Date.now(), year, description });
                    }
            
                    renderEntries();
                    timelineForm.reset();
                    delete timelineForm.dataset.editId; // Clear edit ID
                });
            
                function renderEntries() {
                    timelineEntries.innerHTML = '';
                    entries.forEach(entry => {
                        const li = document.createElement('li');
                        li.className = 'list-group-item d-flex justify-content-between align-items-center';
                        li.innerHTML = `
                            <div>
                                <strong>${entry.date}:</strong> ${entry.description}
                            </div>
                            <div>
                                <button class="btn btn-outline-primary btn-sm me-2" onclick="editEntry(${entry.id})">Edit</button>
                                <button class="btn btn-outline-danger btn-sm" onclick="deleteEntry(${entry.id})">Delete</button>
                            </div>
                        `;
                        timelineEntries.appendChild(li);
                    });
                }
            
                window.editEntry = function (id) {
                    const entry = entries.find(e => e.id === id);
                    if (entry) {
                        document.getElementById('timeline-year').value = entry.year;
                        document.getElementById('timeline-description').value = entry.description;
                        document.getElementById('timeline-submit').textContent = 'Update Entry';
                        timelineForm.dataset.editId = id; // Store the ID of the entry being edited
                    }
                };
            
                window.deleteEntry = function (id) {
                    entries = entries.filter(e => e.id !== id);
                    renderEntries();
                };
            
                fetchTimeline(); // Fetch and render entries on initialization
            }
            

            initializeOverview();
                
        });
    </script>
</body>
</html>